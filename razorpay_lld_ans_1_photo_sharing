photo sharing app:

User Management:
Authentication: Users should be able to sign up and sign in using their email and password or they should be able to use OAuth from social sites.
Authorization: Perform users’ management: define their types (admin, user) and privileges (upload, edit profile information, delete comments).
User Profiles: Collect the user’s details such as; username, email, and even the profile picture.
Image Upload and Storage:
Upload Service: Safe uploading of images, file formats allowed (JPEG, PNG).
Metadata Management: Save some information such as the time the image was uploaded, the user’s ID, tags, and a brief description of the picture.
Security: Sanitize the files uploaded to avoid containing bad content, and limit the usage to avoid over-usage by users.
Image Processing:
Resizing and Compression: Ability to respond to images, for example, the size of images, how many images on one page, and resize them for all view ports such as thumbnails, and full-size.
Thumbnail Generation: This way you need to generate thumbnails to make the loading time more efficient on the image grids.
Quality Control: Ensure enlargement and or reduction do not compromise the quality of the image.
User Interaction:
Likes and Comments: Provide the functionality to let the users like images and offer them a chance to comment on the images.
Sharing: Make it easy for the users to share images either by  direct link 
Notifications: Alert your users when they have been liked, commented on or have shared something.

/*ans starts====================================================*/



#include <iostream>
#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <memory>
#include <string>
#include <ctime>

using namespace std;

/* ======================= Enums ======================= */
enum class Role { ADMIN, USER };
enum class ReactionType { LOVE, LIKE, LAUGH, HEART, KISS };
enum class NotificationType { REACTED, SHARED, COMMENTED };

/* ======================= Entities ======================= */
class User {
public:
    string id;
    string username;
    string email;
    Role role;
    string profilePicId;

    User(string id, string username, string email, Role role)
        : id(id), username(username), email(email), role(role) {}
};

class Image {
public:
    string id;
    string uploaderId;
    string description;
    vector<string> tags;
    time_t uploadTime;
    int likeCount = 0;
    vector<string> reactionIds;
    vector<string> commentIds;

    Image(string id, string uploaderId, string description, vector<string> tags)
        : id(id), uploaderId(uploaderId), description(description), tags(tags) {
        uploadTime = time(nullptr);
    }
};

class Reaction {
public:
    string id;
    ReactionType type;
    string userId;
    string imageId;

    Reaction(string id, ReactionType type, string userId, string imageId)
        : id(id), type(type), userId(userId), imageId(imageId) {}
};

class Comment {
public:
    string id;
    string userId;
    string content;
    string imageId;
    time_t timestamp;

    Comment(string id, string userId, string content, string imageId)
        : id(id), userId(userId), content(content), imageId(imageId) {
        timestamp = time(nullptr);
    }
};

class Notification {
public:
    string id;
    string notifiedUserId;
    NotificationType type;
    string message;
    string generatorId;
    time_t timestamp;

    Notification(string id, string notifiedUserId, NotificationType type, string message, string generatorId)
        : id(id), notifiedUserId(notifiedUserId), type(type), message(message), generatorId(generatorId) {
        timestamp = time(nullptr);
    }
};

/* ======================= Services ======================= */
class AuthService {
public:
    static bool login(const User& user) {
        cout << "User " << user.username << " logged in successfully.\n";
        return true;
    }

    static bool signup(const User& user) {
        cout << "User " << user.username << " signed up successfully.\n";
        return true;
    }

    static bool OAuth() {
        cout << "OAuth login successful.\n";
        return true;
    }
};

class ImageService {
public:
    static void uploadImage(const Image& image) {
        cout << "Image with ID " << image.id << " uploaded successfully.\n";
    }

    static void shareImage(const Image& image) {
        cout << "Image with ID " << image.id << " shared successfully.\n";
    }

    static void deleteImage(const string& imageId) {
        cout << "Image with ID " << imageId << " deleted successfully.\n";
    }

    static void updateImage(const Image& image) {
        cout << "Image with ID " << image.id << " updated successfully.\n";
    }
};

class NotificationService {
public:
    static void sendNotification(const Notification& notification) {
        cout << "Notification sent to User " << notification.notifiedUserId 
             << " with message: " << notification.message << "\n";
    }
};

/* ======================= Facade ======================= */
class UserFacade {
public:
    static void handleReaction(const string& followerId, const string& imageId, ReactionType reactionType) {
        cout << "User " << followerId << " reacted to Image " << imageId << " with reaction " << static_cast<int>(reactionType) << ".\n";
        Notification notification("n1", followerId, NotificationType::REACTED, "You have a new reaction", imageId);
        NotificationService::sendNotification(notification);
    }

    static void handleComment(const string& followerId, const string& imageId, const string& commentDesc) {
        cout << "User " << followerId << " commented on Image " << imageId << ": " << commentDesc << "\n";
        Notification notification("n2", followerId, NotificationType::COMMENTED, "You have a new comment", imageId);
        NotificationService::sendNotification(notification);
    }

    static void handleShare(const string& userId, const string& imageId) {
        cout << "User " << userId << " shared Image " << imageId << ".\n";
        Notification notification("n3", userId, NotificationType::SHARED, "Your image was shared", imageId);
        NotificationService::sendNotification(notification);
    }
};

int main() {
    User user1("1", "Alice", "alice@example.com", Role::USER);
    Image image1("101", "1", "A beautiful sunset", {"sunset", "nature"});
    
    AuthService::signup(user1);
    AuthService::login(user1);

    ImageService::uploadImage(image1);

    UserFacade::handleReaction("1", "101", ReactionType::LOVE);
    UserFacade::handleComment("1", "101", "Amazing shot!");
    UserFacade::handleShare("1", "101");

    return 0;
}
