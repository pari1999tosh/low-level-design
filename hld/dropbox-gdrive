functional requirement:
 - upload file
 - download file
 - sync file across devices, 

out of scope:
 - don't design blob storage, use s3- that's a seperate question.

non functional:
 - availability
 - consistency
 - availability > consistency , main purpose of such sevrices is to add arhcitecture diagram, database diagram etc.
 - low latency uploads and downloads(as low as possible)
 - support large file uploads like 50gb.
 - resume upload functionality should be there.
 - High data integrity.it's okay if syncing takes some time, but after syncing it should be accurate.

entities:
 - file binary data(raw data)
 - file metadata
 - users

APIs:
 - POST /files
    body: file(binary data)
 - GET /files
      download the files

 - GET /changes?since={timestamp}, this endpoint is used to know if something has changed


while downloading a file, we don't download from s3 in the service and then let browser download it from service.
instead we give presigned s3 url to browser and browser directly downloads it.


after 30:00 video:
main problems in current design:
API gateways and browser etc has hard limit on payload size of POST request (10 mb), so we can't upload large files
