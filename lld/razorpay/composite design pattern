whenever the system has tree like structure and we want to treat leaf nodes and collection of leaf and non-leaf nodes interchangeable as a single
unit, we use composite design pattern:

1.suppose you need to design a file system ,without design pattern it would look something like:

import java.util.*;

class File {
    String name;

    public File(String name) {
        this.name = name;
    }

    public void print() {
        System.out.println("File: " + name);
    }

    public void delete() {
        System.out.println("Deleting file: " + name);
    }

    public void rename(String newName) {
        this.name = newName;
    }
}

class Folder {
    String name;
    List<File> files = new ArrayList<>();
    List<Folder> folders = new ArrayList<>();

    public Folder(String name) {
        this.name = name;
    }

    public void addFile(File file) {
        files.add(file);
    }

    public void addFolder(Folder folder) {
        folders.add(folder);
    }

    public void print() {
        System.out.println("Folder: " + name);
        for (Folder f : folders) {
            f.print(); // Recursively print subfolders
        }
        for (File file : files) {
            file.print();
        }
    }

    public void delete() {
        System.out.println("Deleting folder: " + name);
        for (Folder f : folders) {
            f.delete();
        }
        for (File file : files) {
            file.delete();
        }
    }

    public void rename(String newName) {
        this.name = newName;
    }
}
public class Client {
    public static void main(String[] args) {
        File f1 = new File("A.txt");
        File f2 = new File("B.txt");

        Folder folder1 = new Folder("Documents");
        folder1.addFile(f1);
        folder1.addFile(f2);

        Folder root = new Folder("Root");
        root.addFolder(folder1);

        // Client must know what type it is!
        List<Object> items = List.of(f1, folder1);

        for (Object item : items) {
            if (item instanceof File) {
                ((File) item).print(); // ‚ùå Ugly and risky
            } else if (item instanceof Folder) {
                
                ((Folder) item).print();
            }
        }
    }
}

1.below problems are there in this code:
  - code duplication.so if logging needs to be added, add in both, same for analytics tool
  - if/else logic in client code, if new class like zipfile comes, it will break open/closed principle.
  - client is exposed to entity type, client has to know what type of entity it is.

2.above problems are resolved via composite design pattern:

import java.util.ArrayList;
import java.util.List;

// Step 1: Common interface
interface FileSystemEntity {
    void rename(String newName);
    void delete();
    void printStructure(String indent);
}

// Step 2: Leaf node - File
class File implements FileSystemEntity {
    private String name;

    public File(String name) {
        this.name = name;
    }

    @Override
    public void rename(String newName) {
        this.name = newName;
    }

    @Override
    public void delete() {
        System.out.println("Deleting file: " + name);
    }

    @Override
    public void printStructure(String indent) {
        System.out.println(indent + "- File: " + name);
    }
}

// Step 3: Composite node - Folder
class Folder implements FileSystemEntity {
    private String name;
    private List<FileSystemEntity> children = new ArrayList<>();

    public Folder(String name) {
        this.name = name;
    }

    public void add(FileSystemEntity entity) {
        children.add(entity);
    }

    @Override
    public void rename(String newName) {
        this.name = newName;
    }

    @Override
    public void delete() {
        System.out.println("Deleting folder: " + name);
        for (FileSystemEntity child : children) {
            child.delete();
        }
    }

    @Override
    public void printStructure(String indent) {
        System.out.println(indent + "+ Folder: " + name);
        for (FileSystemEntity child : children) {
            child.printStructure(indent + "  ");
        }
    }
}

// Step 4: Client code
public class FileSystemDemo {
    public static void main(String[] args) {
        // Create files
        File file1 = new File("App.java");
        File file2 = new File("Logger.java");
        File file3 = new File("Parser.java");

        // Create folders
        Folder utilsFolder = new Folder("utils");
        Folder srcFolder = new Folder("src");

        // Build hierarchy
        utilsFolder.add(file2);
        utilsFolder.add(file3);

        srcFolder.add(file1);
        srcFolder.add(utilsFolder);

        // Print file system
        srcFolder.printStructure("");

        // Rename and delete
        System.out.println("\n-- After renaming and deletion --");
        utilsFolder.rename("helpers");
        srcFolder.delete();
    }
}


  


  
