//react ques for nutanix preperation


1. useMeo: memoizes the value of a function
  const fact = (n) => {
    if(n == 1) return 1;
    return n*fact(n-1); 
  }
  let val = useMemo(() => fact(nums),[]);
  <div>{val}</div>

2.useCallback: memoizes the definition of a function
   const val = (nums) => {
     return fact*nums;
   }

   const val = useCallback((nums) => {
     return nums*fact
   },[fact])

   now a new definition of function will not be created unless fact changes even if component rerenders.

3. call method: used to set this context explicitly and calls immediately, arguements are passed to original function via .call as comma seperated values

const jsun = {
  name:"paritosh",
  age:34
}

const jsun2 = {
  name:"pritam",
  age:43
}

function func(country){
  console.log(this.name, this.age)
}

func.call(jsun,"India")

4. apply: same as call, just the arguements are passed as array list 
     func.apply(jsun,["india"]), country arguement in func will be taken as india

5. bind: it doesn't call function immediately but binds it with the context we provide, some of the arguement can be binded with .bind while other can be passed at the time of calling the
   function.

   function intro(country, gender, technology){
       console.log(this.name, this.age, country,gender, technology);
   }

   const boundedIntro = intro.bind(jsun2,'india','male');
   boundedIntro('AWS')

6. Currying:
      pass arguements one by one 
      function add(a) {
        return function(b) {
          return a + b;
        };
      }
      
      const addTwo = add(2);   // Returns a function that adds 2 to its argument
      console.log(addTwo(3));  // Output: 5
      
      // Or directly call like this:
      console.log(add(4)(5));  // Output: 9

7. A closure gives you access to an outer function’s scope from an inner function — even after the outer function has returned.
   in currying example above, even if outer funcition has returned, the scope of variable "a" is with inner function

8. deep copy vs shallow copy:
    shallow copy doesn't copy nested objects independely, only top level properties:
    const original = {
    name: "Alice",
    address: {
        city: "New York",
        zip: 10001
      }
    };
    
    // Shallow copy using Object.assign
    const shallowCopy = Object.assign({}, original);
    
    shallowCopy.name = "Bob";         // Changes only shallowCopy.name
    shallowCopy.address.city = "LA";  // Changes city in both shallowCopy and original
    
    console.log(original.address.city); // Output: LA

    deep copy copies independetly recursively:
    const original = {
    name: "Alice",
      address: {
        city: "New York",
        zip: 10001
      }
    };
    
    const deepCopy = JSON.parse(JSON.stringify(original));
    
    deepCopy.address.city = "LA";
    
    console.log(original.address.city); // Output: New York (unchanged)


9. debouncing:
    keep clearing function when component unmounts and set new timer:
     useEffect(() => {
    // 1️⃣ Set a timeout for 500ms
    const timer = setTimeout(() => {
          if (query) {
            console.log("API Call for query:", query);
            // You can make your API call here
          }
        }, 500);
    
        // 2️⃣ Cleanup the timeout if the component re-renders or query changes
        return () => clearTimeout(timer);
    
    }, [query]); 

10. controlled component: form inpur values have states, so sideeffecs can be performed on value change even if form submit doesn't happen
    uncontrolled component: we have to read ref value using useRef on button clicks, so if u want to do api call when a input value change, you have to read the ref
11.useEffect and useLayoutEffect: asynchronous and after rendering <-> synchronous and blocks repainting till it finished.

12 virtual DOM creation -> diffing -> actual DOM tree creation(rendering) -> layout -> repainting
                                                                             useEffect starts from here and asynchronous
                                                                                       useLayoffect starts from here but asynchronous

13. Higher Order Components: components that take a components and return a new component with enhanced functionality. ex: suppose you have your custom logger function which take a component
    and return a new component by enabling logging in same component. now you can resuse logging functionality based on your needs , whatever component you want with logging enabled, just
    wrap them with logger functions.

    function withLogger(WrappedComponent) {
      return function LoggerComponent(props) {
        console.log('Rendering:', WrappedComponent.name);
        return <WrappedComponent {...props} />;
      };
    }

    function MyComponent(props) {
      return <div>{props.message}</div>;
    }
    
    const MyComponentWithLogger = withLogger(MyComponent);


14. useReducer: just like useState , const [state, dispatcher] = useReducer(reducer, initialState)
    function reducer(state, action) {
      switch (action.type) {
        case 'increment':
          return { count: state.count + 1 };
        case 'decrement':
          return { count: state.count - 1 };
        default:
          throw new Error();
      } 
    }
    
    function Counter() {
      const [state, dispatch] = React.useReducer(reducer, { count: 0 });
    
      return (
        <>
          Count: {state.count}
          <button onClick={() => dispatch({ type: 'increment' })}>+</button>
          <button onClick={() => dispatch({ type: 'decrement' })}>-</button>
        </>
      );
    }


15. Lazy loading:
    import React, { Suspense, lazy } from 'react';

    const Dashboard = lazy(() => import('./Dashboard'));
    const Settings = lazy(() => import('./Settings'));
    
    function App() {
      return (
        <div>
          <h1>My App</h1>
          <Suspense fallback={<p>Loading page...</p>}>
            <Dashboard />
            <Settings />
          </Suspense>
        </div>
      );
    }


16. deepClone function:
    function deepClonse(value){
        if(value == null || typeof value != 'object')
         return value;
        if(Array.isArray(value) ){
           return value.map(item => deepClonse(item)) 
        }
        let clonedObj = {};
        for(const key in value){
            if(value.hasOwnPropert(key)){
                clonedObj[key] = deepClone(value[key]);
            }
        }
        return clonedObj;
    }


17. Implement a calculator class which does this cal.add(2).sub(3).mul(4).delay(2000).add(4) etc

   class Calculator {
  constructor(initialValue = 0) {
    this.value = initialValue;
    this.queue = Promise.resolve(); // used for chaining async & sync ops
  }

  _enqueue(fn) {
    this.queue = this.queue.then(() => fn());
    return this;
  }

  add(num) {
    return this._enqueue(() => {
      this.value += num;
    });
  }

  sub(num) {
    return this._enqueue(() => {
      this.value -= num;
    });
  }

  mul(num) {
    return this._enqueue(() => {
      this.value *= num;
    });
  }

  delay(ms) {
    return this._enqueue(() => new Promise(resolve => {
      console.log(`⏳ Waiting for ${ms}ms`);
      setTimeout(resolve, ms);
    }));
  }

  equals(callback) {
    this._enqueue(() => {
      callback(this.value);
    });
  }
}


18. custome promise:
    class MyPromise {
  constructor(executor) {
    this.state = 'pending';
    this.value = undefined;       // resolved value
    this.reason = undefined;      // rejection reason
    this.onFulfilledCallbacks = [];
    this.onRejectedCallbacks = [];

    const resolve = (value) => {
      if (this.state !== 'pending') return;   // state is immutable once set
      this.state = 'fulfilled';
      this.value = value;
      // Execute all stored success callbacks asynchronously
      this.onFulfilledCallbacks.forEach(fn => setTimeout(() => fn(value), 0));
    };

    const reject = (reason) => {
      if (this.state !== 'pending') return;
      this.state = 'rejected';
      this.reason = reason;
      // Execute all stored failure callbacks asynchronously
      this.onRejectedCallbacks.forEach(fn => setTimeout(() => fn(reason), 0));
    };

    // Immediately execute the executor function with resolve and reject
    try {
      executor(resolve, reject);
    } catch (error) {
      reject(error);  // If executor throws, reject the promise
    }
  }

  then(onFulfilled, onRejected) {
    // Provide default handlers if not functions
    onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : value => value;
    onRejected = typeof onRejected === 'function' ? onRejected : reason => { throw reason; };

    // Return a new promise for chaining
    return new MyPromise((resolve, reject) => {
      if (this.state === 'fulfilled') {
        // Async call to onFulfilled
        setTimeout(() => {
          try {
            const result = onFulfilled(this.value);
            resolve(result);       // Resolve next promise with result
          } catch (error) {
            reject(error);         // Reject next promise if error
          }
        }, 0);
      } else if (this.state === 'rejected') {
        setTimeout(() => {
          try {
            const result = onRejected(this.reason);
            resolve(result);
          } catch (error) {
            reject(error);
          }
        }, 0);
      } else {
        // If still pending, queue callbacks
        this.onFulfilledCallbacks.push(() => {
          try {
            const result = onFulfilled(this.value);
            resolve(result);
          } catch (error) {
            reject(error);
          }
        });

        this.onRejectedCallbacks.push(() => {
          try {
            const result = onRejected(this.reason);
            resolve(result);
          } catch (error) {
            reject(error);
          }
        });
      }
    });
  }

  catch(onRejected) {
    return this.then(undefined, onRejected);
  }
}

19.  calculator class with method chaining
class Calculator {
  constructor(initialValue = 0) {
    this.value = initialValue;
    this.queue = Promise.resolve(); // used for chaining async & sync ops
  }

  _enqueue(fn) {
    this.queue = this.queue.then(() => fn());
    return this;
  }

  add(num) {
    return this._enqueue(() => {
      this.value += num;
    });
  }

  sub(num) {
    return this._enqueue(() => {
      this.value -= num;
    });
  }

  mul(num) {
    return this._enqueue(() => {
      this.value *= num;
    });
  }

  delay(ms) {
    return this._enqueue(() => new Promise(resolve => {
      console.log(`⏳ Waiting for ${ms}ms`);
      setTimeout(resolve, ms);
    }));
  }

  equals(callback) {
    this._enqueue(() => {
      callback(this.value);
    });
  }
}


  
