// import React, { useState } from "react";

// const initialData = [
//   {
//     id: 1,
//     label: "Parent 1",
//     checked: false,
//     children: [
//       {
//         id: 2,
//         label: "Child 1.1",
//         checked: false,
//         children: [
//           {
//             id: 3,
//             label: "Grandchild 1.1.1",
//             checked: false,
//           },
//         ],
//       },
//       {
//         id: 4,
//         label: "Child 1.2",
//         checked: false,
//       },
//     ],
//   },
//   {
//     id: 5,
//     label: "Parent 2",
//     checked: false,
//   },
// ];

// export default function App() {
//   const [tree, setTree] = useState(initialData);

//   const updateCheckStatus = (node, checked) => {
//     return {
//       ...node,
//       checked,
//       children: node.children
//         ? node.children.map((child) => updateCheckStatus(child, checked))
//         : undefined,
//     };
//   };

//   const handleCheck = (nodeId, checked, nodes) => {
//     return nodes.map((node) => {
//       if (node.id === nodeId) {
//         return updateCheckStatus(node, checked);
//       }

//       if (node.children) {
//         return {
//           ...node,
//           children: handleCheck(nodeId, checked, node.children),
//         };
//       }

//       return node;
//     });
//   };

//   const onCheckboxChange = (id, checked) => {
//     const updatedTree = handleCheck(id, checked, tree);
//     setTree(updatedTree);
//   };

//   // Recursive TreeNode component
//   const TreeNode = ({ node, level = 0, onCheckboxChange }) => {
//     return (
//       <div>
//         <div style={{ marginLeft: `${level * 20}px` }}>
//           <label>
//             <input
//               type="checkbox"
//               checked={node.checked}
//               onChange={(e) => onCheckboxChange(node.id, e.target.checked)}
//             />
//             {node.label}
//           </label>
//         </div>
//         {node.children && node.children.length > 0 && (
//           <div>
//             {node.children.map((child) => (
//               <TreeNode
//                 key={child.id}
//                 node={child}
//                 level={level + 1}
//                 onCheckboxChange={onCheckboxChange}
//               />
//             ))}
//           </div>
//         )}
//       </div>
//     );
//   };

//   return (
//     <div className="p-4">
//       <h2 className="text-xl font-bold mb-4">Nested Checkbox Tree</h2>
//       {tree.map((node) => (
//         <TreeNode 
//           key={node.id} 
//           node={node} 
//           level={0}
//           onCheckboxChange={onCheckboxChange}
//         />
//       ))}
//     </div>
//   );
// }


import React, { useState } from 'react'

const initialData = [{
  id: "1",
  checked: false,
  label: "parent1",
  children: [{
    id: "1.1",
    checked: false,
    label: "child1",
    children: [{
      id: "1.1.1",
      checked: false,
      label: "grandhchild1",
    }]
  }]
}, {
  id: "2",
  label: "parent2",
  checked: false,
  children: [
    {
      id: "2.1",
      label: "child2",
      checked: false,
      children: [{
        id: "2.1.1",
        checked: false,
        label: "grandhchild2",
      }]
    }
  ]
}]



const Counter = () => {
  const [tree, setTree] = useState(initialData);

  const updateCheckStatus = (node, ischecked) => {
    return {
      ...node,
      checked: ischecked,
      children: node.children ? node.children?.map(it => updateCheckStatus(it, ischecked)) : undefined
    }
  }

  const handleCheck = (nodeId, ischecked, node) => {
    console.log("handlec check is called with nodeId========", nodeId)
    return node.map(item => {
      if (item.id == nodeId) {
        return updateCheckStatus(item, ischecked);
      }
      if (item.children && item.children.length > 0) {
        return {
          ...item,
          children: handleCheck(nodeId, ischecked, item.children)
        }
      }
      return node;
    })

  }

  const handleChange = (id, isChecked, node) => {
    let updatedTree = handleCheck(id, isChecked, node);
    setTree(updatedTree);
  }

  const TreeNode = ({ node, handleChange, level = 0 }) => {
    return (
      <div>
        <div style={{ marginLeft: `${level * 20}px` }}>
          <label>
            {console.log("rendeing input with label", node.label)}
            <input
              type="checkbox"
              checked={node.checked}
              onChange={(e) => handleChange(node.id, e.target.checked, tree)}
            >

            </input>
            {node.label}
          </label>
        </div>
        {node.children && node.children.length > 0 && (<div>
          {node.children?.map(child => {
            console.log("mapping on children with label========", child)
            return <TreeNode
              key={child.id}
              node={child}
              handleChange={handleChange}
              level={level + 1}
            >

            </TreeNode>
          })}
        </div>)}



      </div>)
  }


  return (
    <div>
      <h2></h2>nested Tree
      {
        tree.map((node) => {

          return <TreeNode
            key={node.id}
            node={node}
            handleChange={handleChange}
            level={0}
          >

          </TreeNode>
        })
      }
    </div>
  )
}

export default Counter


