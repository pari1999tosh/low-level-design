without design pattern:

import java.util.List;

// Common Interface
interface Person {
    void idCheck();
    void bagCheck();
    void bodyScan();
}

// Concrete Classes
class Pilot implements Person {
    @Override
    public void idCheck() {
        System.out.println("Checking pilot ID via crew badge.");
    }

    @Override
    public void bagCheck() {
        System.out.println("Skimming pilot's bag for restricted items.");
    }

    @Override
    public void bodyScan() {
        System.out.println("Pilot cleared via uniform scan.");
    }
}

class Passenger implements Person {
    @Override
    public void idCheck() {
        System.out.println("Checking passenger ID against boarding pass.");
    }

    @Override
    public void bagCheck() {
        System.out.println("Running passenger bag through scanner.");
    }

    @Override
    public void bodyScan() {
        System.out.println("Performing full-body scan on passenger.");
    }
}

class VIP implements Person {
    @Override
    public void idCheck() {
        System.out.println("Auto-verifying VIP identity.");
    }

    @Override
    public void bagCheck() {
        System.out.println("Politely requesting VIP to allow bag check.");
    }

    @Override
    public void bodyScan() {
        System.out.println("Escorting VIP through premium scanner.");
    }
}

// Client Code
public class AirportSecurityWithoutVisitor {
    public static void main(String[] args) {
        List<Person> people = List.of(
            new Pilot(),
            new Passenger(),
            new VIP()
        );

        System.out.println("=== ID Check ===");
        for (Person person : people) {
            person.idCheck();
        }

        System.out.println("\n=== Bag Check ===");
        for (Person person : people) {
            person.bagCheck();
        }

        System.out.println("\n=== Body Scan ===");
        for (Person person : people) {
            person.bodyScan();
        }
    }
}




with visitor design pattern:

import java.util.List;

// Visitor Interface
interface SecurityVisitor {
    void visit(Pilot pilot);
    void visit(Passenger passenger);
    void visit(VIP vip);
}

// Element Interface
interface Person {
    void accept(SecurityVisitor visitor);
}

// Concrete Elements
class Pilot implements Person {
    @Override
    public void accept(SecurityVisitor visitor) {
        visitor.visit(this);
    }
}

Pilot.accept(new IDCheckVisitor())

class Passenger implements Person {
    @Override
    public void accept(SecurityVisitor visitor) {
        visitor.visit(this);
    }
}

class VIP implements Person {
    @Override
    public void accept(SecurityVisitor visitor) {
        visitor.visit(this);
    }
}

// Step 1: ID Check
class IDCheckVisitor implements SecurityVisitor {
    @Override
    public void visit(Pilot pilot) {
        System.out.println("Checking pilot ID via crew badge.");
    }

    @Override
    public void visit(Passenger passenger) {
        System.out.println("Checking passenger ID against boarding pass.");
    }

    @Override
    public void visit(VIP vip) {
        System.out.println("Auto-verifying VIP identity.");
    }
}

// Step 2: Bag Check
class BagCheckVisitor implements SecurityVisitor {
    @Override
    public void visit(Pilot pilot) {
        System.out.println("Skimming pilot's bag for restricted items.");
    }

    @Override
    public void visit(Passenger passenger) {
        System.out.println("Running passenger bag through scanner.");
    }

    @Override
    public void visit(VIP vip) {
        System.out.println("Politely requesting VIP to allow bag check.");
    }
}

// Step 3: Body Scan
class BodyScanVisitor implements SecurityVisitor {
    @Override
    public void visit(Pilot pilot) {
        System.out.println("Pilot cleared via uniform scan.");
    }

    @Override
    public void visit(Passenger passenger) {
        System.out.println("Performing full-body scan on passenger.");
    }

    @Override
    public void visit(VIP vip) {
        System.out.println("Escorting VIP through premium scanner.");
    }
}

class CovidCheckVisitor implements SecurityVisitor {
    @Override
    public void visit(Pilot pilot) {
        System.out.println("Pilot cleared via uniform scan.");
    }

    @Override
    public void visit(Passenger passenger) {
        System.out.println("Performing full-body scan on passenger.");
    }

    @Override
    public void visit(VIP vip) {
        System.out.println("Escorting VIP through premium scanner.");
    }
}

// Client Code
public class AirportSecurity {
    public static void main(String[] args) {
        List<Person> people = List.of(
            new Pilot(),
            new Passenger(),
            new VIP()
        );

        List<SecurityVisitor> securitySteps = List.of(
            new IDCheckVisitor(),
            new BagCheckVisitor(),
            new BodyScanVisitor(),
            new CovidCheckVisitor(),
        );

        for (SecurityVisitor step : securitySteps) {
            System.out.println("\n=== " + step.getClass().getSimpleName() + " ===");
            for (Person person : people) {
                person.accept(step);
            }
        }
    }
}




software development analogy:

suppose you want to build vscode where multiple languages are supported and extensions are allowed to add.
high possibility that a new extension will come, but highly unlikely a new programming language will come.
we can apply visitor design pattern here





ratne ka tareeka:

whenever in a system, a task is to be done(security check). there are mulitple entities on which the task is to be done(passenger, VIP, crew,pilot) and there are series of steps for doing the task on these entities.
if it is highly unlikely that some new entities will come, but there is a very high chance of some new step adding in the series of steps that needs to be applied to do the task on these entities
we use visitor design pattern in following way:
1.instead of creating enties classes and giving the series of steps to these classes.
2.we create visitor classes for each of these steps  and each visitor class will have overriden function
  for visiting different entities.
